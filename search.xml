<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Centos6手动安装步骤]]></title>
      <url>/2018/01/08/Centos6%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<h3 id="一、安装Centos6-9"><a href="#一、安装Centos6-9" class="headerlink" title="一、安装Centos6.9"></a>一、安装Centos6.9</h3><p>1、选择磁盘空间足够大的本地磁盘，新建ISO、Centos6.9文件夹。将Centos映像光盘拷贝到ISO文件夹里，开启VMware 新建虚拟机。</p>
<p>选择经典 → 稍后安装操作系统 → 选择Linux操作系统 → Centos 64位 → 修改虚拟机名称 →更改虚拟机保存路径安装到指定的位置 → 设置磁盘大小200GB → 将虚拟磁盘存储为单个文件 → 点击完成→虚拟机创建完成;</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-58ad8aea61bb2e5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-909b0432265fe9b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-42c8ce93a0788bd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-8459601e2cba1334.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-07fb53e506f8ce2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>2、设置硬盘配置，安装操作系统。</p>
<p>（1）将硬件内存设置为2GB、处理器选择2个、网络适配器设置为仅主机模式、新建一个网络适配器设置为桥接模式。CD/DVD选择ISO文件夹中的Centos6文件、硬件设置完成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-f44e4a1da252020d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>（2）开启虚拟机安装Centos6操作系统</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-38b2250611f6065f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-2b167e59b7b041f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-655e699ad4fd0389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-7633180ca90ec6a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-023998b3bd9808ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-fa1ba8a57103525c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-5adc87529407683a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-e5389a4518a48a21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-ba20d0e5b3799df7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-e608df4e68ae3f16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-1d4bc35f12c08b7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-d48829e6d7b47d15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-e4f9000dcea6d6e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-13d5e7d520f4d405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-2ca63d015e15b6de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-3e2eb7a3eecc6afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-c07167098ef22f6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-2aadf799b37109d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6132998-6342f7400d2c1db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
]]></content>
      
        
        <tags>
            
            <tag> Centos6手动安装步骤 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统调优]]></title>
      <url>/2018/01/07/LINUX%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h3 id="linux系统调优"><a href="#linux系统调优" class="headerlink" title="linux系统调优"></a>linux系统调优</h3><hr>
<ul>
<li>进程调度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">os:</span><br><span class="line">硬件抽象，虚拟计算机</span><br><span class="line">system call---操作系统输出</span><br><span class="line">cpu：</span><br><span class="line">虚拟化，基于时序进行分段运行的，消耗时间片（time slice），</span><br><span class="line">某些进程优先级---打标签</span><br><span class="line">调度器：</span><br><span class="line">也是程序---内核中的进程调度子系统。</span><br><span class="line">调度器中的一种 CFS调度器</span><br><span class="line">调度器：Big O 算法</span><br><span class="line">O（1）从进程中选择一个进程所需要的时长时恒定的；调度进程，优先级。</span><br><span class="line">优先级分为两类：</span><br><span class="line">实时优先级--- 0-99</span><br><span class="line">静态优先级--- 100-139，用户可以手动指定nice值来调整优先级；</span><br><span class="line">Memory:内存</span><br><span class="line">虚拟地址空间</span><br><span class="line">PAE：</span><br><span class="line">32bits,4bits在32位的基础上加入4位变成现今的64G；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cpu调度</span><br><span class="line">0-139</span><br><span class="line">实时优先级；1-99---数值越大优先级越高</span><br><span class="line">动态优先级；100-139--数字越小优先级越高</span><br><span class="line"></span><br><span class="line">linux里调度器有多个不同的调度器；对于同一个进程由优先级较高的调度器进行调度；</span><br><span class="line">用户空间；调度器为CFS完全公平调度</span><br><span class="line">实时进程；调度器为SCHED_FIFO【0-99】</span><br><span class="line"></span><br><span class="line">类别；</span><br><span class="line">实时优先级调度；</span><br><span class="line">SCHED_FIFO ---调度器为先进先出 【0-99】---调度内核级别</span><br><span class="line">SCHED_RR ---轮询调度---同一种级别的进程有轮询的方式进行调度；</span><br><span class="line">用户空间调度；</span><br><span class="line">SCHED_NORMAL,SCHED_OTHER 【100-139】---完全公平调度</span><br><span class="line"></span><br><span class="line">cpu调度进行更改；</span><br><span class="line">动态优先级调度，用户空间调度；</span><br><span class="line">SCHED_FIFO,</span><br><span class="line">nice,renice</span><br><span class="line">实时优先级调度更改；</span><br><span class="line">SCHED_FIFO</span><br><span class="line"># chrt -f [1-99] /path/to/program arguments</span><br><span class="line">SCHED_RR;real-time</span><br><span class="line"># chrt -r [1-99] /path/to/program arguments</span><br></pre></td></tr></table></figure>
<ul>
<li>cpu绑定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">strace 跟踪进程</span><br><span class="line"></span><br><span class="line">绑定cpu;</span><br><span class="line"># cat /proc/cpuinfo ---查看cpu个数类型</span><br><span class="line"># ps axo psr，comm ---显示哪个程序运在哪个CPU上，</span><br><span class="line"># ps axo psr,comm,pid---显示运行的进程及pid</span><br><span class="line">绑定qpidi进程的cpu</span><br><span class="line"># taskset -p -c 3  11215</span><br><span class="line"># ps axo psr，comm</span><br><span class="line">也可以绑定两个cpu</span><br><span class="line"># taskset -p -c 3,4  11215</span><br><span class="line"># ps axo psr，comm</span><br><span class="line"></span><br><span class="line">中断和IRQ调节，将cpu隔离出来专门记录中断信息；</span><br><span class="line">查看中断文件每个CPU的中断数；</span><br><span class="line"># cat /proc/interrupts--- cpu的io中断号</span><br><span class="line"># ls /proc/irp/---中断文件       </span><br><span class="line"># ls /proc/interrupts/0/---查看中断文件的中的绑定cpu的文件；</span><br><span class="line"># cat /proc/irp/0/smp_affinity</span><br><span class="line">ffffffff,ffffffff----一般情况下默认绑定格式；</span><br><span class="line"></span><br><span class="line">定义中断由第一个cpu处理绑定；</span><br><span class="line"># echo 1 &gt;/proc/irp/32/smp_affinity---定义32号中断由第一个CPU来处理</span><br><span class="line"># cat  /proc/irp/32/smp_affinity</span><br><span class="line">1</span><br><span class="line">要想将所有的中断号绑定在1号CPU需要脚本来实现；</span><br></pre></td></tr></table></figure>
<p>numa—服务实现自动绑定CPU;略<br>numa,numactl,numad<br>nice renlce 查文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">隔离CPU编辑配置文件；</span><br><span class="line">/etc/grub.conf</span><br><span class="line">内容尾部kernel后添加Isolcpus=cpu namber,cpu nameber (注意写上cpu的号码，0，1，2，3)</span><br><span class="line">定义中断smp_affinity；</span><br><span class="line"># echo cpunamber,...&gt;/proc/irp/#编号/smp_affinity/</span><br><span class="line">中断中使用的CPU是处Isolcpus外的CPU；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">建议使用的监控工具CPU utilinzation;</span><br><span class="line">htop,dstat,glances,sar，sysdig(需要自己编译安装)</span><br><span class="line"># sar -p ALL 1 显示一秒钟所有使用率cpu</span><br><span class="line"># iostat -c 1 ---显示cpu的使用率；查看io状态命令，也可以查看cpu</span><br><span class="line"># uptime ---可以查看cpu使用率，平均负载情况；</span><br><span class="line"># vmstat 1 ----查看 procs运行队列和阻塞队列长度</span><br><span class="line">使用strace命令追踪进程查看所阻塞的进程；</span><br><span class="line">上述命令都是从/proc,/sys目录下剪切出来的，可以查看源文件；</span><br></pre></td></tr></table></figure>
<ul>
<li>linux 内存使用架构；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linux所有共享库都在/lib64目录下；</span><br><span class="line">进程调用此目录下的代码；</span><br><span class="line">DMA:</span><br><span class="line">cpu跟外部设备IO设备进行交互的方式；</span><br><span class="line">poll:轮询，忙等待；</span><br><span class="line">中断:</span><br><span class="line">由DMA：自带芯片发送起请求到cpu</span><br><span class="line"></span><br><span class="line">与cup相关的工具；代码级时编译安装编写脚本；评估系统性能；</span><br><span class="line">systemtap,oprofile,valgrind</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">内存；</span><br><span class="line">1、大页面和透明大页面；</span><br><span class="line">内存时由块管理，即众所周知的页面，一个页面由4096字节。1MB内存等于256个页面。1GB内存等于256000个页面等等。CPU有内嵌的内存管理单元，这些的单元包含这些页面列表，每个页面都是用页面条目参考；</span><br><span class="line">让系统管理大量内存有两种方法；</span><br><span class="line">-增加内存管理单元中页表数；</span><br><span class="line">-增加页面大小；</span><br><span class="line"> 第一种方法很昂贵，因为现代处理器中的硬件内存管理单元只支持数百或者书签页表条目。另外适用于管理书签页面（MB内存）硬件和内存算法可能无法很好的管理数百万（甚至数十亿）页面。这会造成性能问题；但程序需要使用比内存管理单元支持的更多的页面，该系统同会退回到缓慢的给予软件的内存管理，从而造成整个系统缓慢运行。</span><br><span class="line"></span><br><span class="line"> 红帽企业版LINUX6采用第二种方法，即使用超大页面。</span><br><span class="line"> 简单说，超大页面是2MB和1GB大小的内存模块。2MB使用的页表可管理多GB内存，而1GB页是TB内存的最佳选择。</span><br><span class="line"></span><br><span class="line"> 超大页面必须引导时分配。他们也很难受懂管理，且经常需要更改代码以便可以有效使用。因此红帽企业版LInux也部署了透明超大页（THP）。THP是一个提取城，可自动创建，管理和使用超大页面的大多数方案；</span><br><span class="line"></span><br><span class="line"> 使用Valgtind简要描述内存使用；C编译成精通编写可以研究；</span><br><span class="line"></span><br><span class="line"> 其他工具；systemtap,oprofile，vagraind都需要写脚本，红帽官方有systemtap使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、编译内核参数；</span><br><span class="line">    内存调优，proc文件系统的、proc/sys/vm目录中</span><br><span class="line">    （1）内存调优；memory过量使用，有三种类型；</span><br><span class="line">    overcommit_memory:有三种参数，分别为0,1,2 ；</span><br><span class="line">    0---默认设置。内核执行启发式内存过量使用处理，方法是估算可用内存量，并拒绝明显的无效的请求。遗憾的是因为存是使用启发式而非准确算法进行部署，这个设置有时可能会赵成系统中的可用内存超载。</span><br><span class="line">    1---内核执行无内存过量使用处理，使用之歌设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能。</span><br><span class="line">    2---内存拒绝等于或者大于总可用swap大小及overcommit_ratio指定的物理RAM比例的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    2---模式中的overcommit_ratio为比例参数；</span><br><span class="line">    内存模式为，swap+RAM*overcommit_ratio磁盘使用大小；</span><br><span class="line">    已条有目的的话使用1模式，2模式将不在考虑范围；</span><br><span class="line"></span><br><span class="line">    配置文件；vim /etc/sysctl.conf当中尾部添加</span><br><span class="line">    vm.overcommit_memory = 1</span><br><span class="line">    保存以后使用sysctl -p命令执行；</span><br><span class="line">     (2)nr_hugepages大内存页；</span><br><span class="line">     规定在内存中配置的超大页数。默认为0。只有系统中有足够的连续可用页时方可分配（或者取消分配）超大页。为这个参数保留的页无法用于其他目的。安装文件</span><br><span class="line">     /usr/share/doc/kernel-doc-kernel_version/Documentation/vm/hugetlbpage.txt</span><br><span class="line"></span><br><span class="line">    查看大内存页使用情况；cat /proc/meminfo</span><br><span class="line">     AnonHugepages   110592 ---有内核自动使用维护的；透明匿名的大内存页；</span><br><span class="line">     Hugepages_Total 0   大内存页使用情况为没有使用</span><br><span class="line">     Hugepages_Free  0   </span><br><span class="line">     Hugepages_Rsvd  0</span><br><span class="line">     Hugepages_Surp  0</span><br><span class="line">     Hugepagesize    2048 大内存页的大小为两兆MB</span><br><span class="line"></span><br><span class="line">     配置大内存页；vim /etc/sysctl.conf当中尾部添加</span><br><span class="line">     vm.nr_hugepages = 10 ---添加10个内存页；</span><br><span class="line">     # sysctl -p ---运行一下</span><br><span class="line">     # cat /proc/meminfo ---查看内存页使用情况</span><br><span class="line"></span><br><span class="line">     也可以使用大内存页使用基于内存的文件系统；</span><br><span class="line">     将大内存页进行挂在文件系统实现；</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 于容量相关的内核可调参数；</span><br></pre></td></tr></table></figure>
<p>位于参数proc文件系统中/proc/sys/kernel/目录中；<br>msgmax —消息队列；单个消息的大小。<br> -一字节为单规定消息队列中任意信息的最大允许大小。这个值一定不能超过该队列的大小（msgmnb）.默认值为65536字节；<br>msgmnb<br> -以字节为单位规定单一信息队列的最大值。默认为65536字节；<br>msgmni<br> -规定信息队列识别符的最大数量（以及队列的最大数量）。64位架构机器的默认值为1985；32位架机器的默认值为1736.</p>
<p>shmall —共享内存<br>  -字节位单位规定一次在该系统中可使用的共享内存总量。64位架构机器的默认值为4294967296；32位架构机器的默认值为268435456.<br>shmmax<br>  -以字节为单位规定内核可允许的最大共享内存片。64位架构机器的默认值为68719476736；32位架构机器的默认值为4294967295.注：单内核支持的值比这个值要多得多。<br>shmmni<br>  -规定系统范围内最大共享内存片段。在63位和32位架构机器中的默认值都是4096。<br>threads-max<br>  -规定一次内核使用的最大线程（任务）数。默认值与max_threads相同。使用的方程式是；<br>  max_threads=mempages / (8 * THREAD_SIZE / PAGE_SIZE)<br>  threads-max的最小值为20.</p>
<p>  shmmni * shmall =shmmax 多少片乘上片的大小等于总数大小；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-与容量相关的文件系统可调参数；</span><br></pre></td></tr></table></figure></p>
<p>已下可调参数位于proc文件系统的/proc/sys/fs/目录中。<br>aio-max-nr<br> -规定在所有活动异步I/O上下文中可允许的最多事件数。默认值为65536。注：更改这个值不会预先分配或者重新定义内核数据结构的大小。</p>
<p> 使用nginx异步io时根据需求可以调大，消耗内存较大；</p>
<p> file-max<br>  -列出内核分配的文件数量的最大值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Out-of-Memory kill 可调用参数；</span><br></pre></td></tr></table></figure>
<p>  -内存不足（OOM）指的时所有可用内存，包括swap空间都已经被分配的计算状态。默认情况下，这个状态可赵成系统panic,并停止如预期般工作。当/proc/sys/vm/panic_on_oom参数设定为0会让内核在出现OOM时调用oom_killer功能。通常oom_killer可杀死偷盗进程，并让系统正常运行；</p>
<p>  可在每一个进程中设定一下参数，提高您对被oom_killer功能杀死的进程进行的控制。它位于proc文件系统中/proc/pid/目录下，其中pid是进程id.</p>
<p>  oom_adj<br>   -定义-16到15之间的一个数值以便帮助决定某进程的oom_score。oom_score值越高，被oom_killer杀死的进程数就越多。将oom_adj值设定为-17则为该进程禁用oom_killer。</p>
<pre><code>？写脚本获取id号进行赋值，或者手动执行；

 当内存耗尽时系统将消耗最大的进程kill掉。
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 调整虚拟内存</span><br><span class="line">虚拟内存</span><br></pre></td></tr></table></figure>
<p>```</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux系统调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在github上搭建个人博客]]></title>
      <url>/2018/01/07/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="在github上搭建-个人博客"><a href="#在github上搭建-个人博客" class="headerlink" title="在github上搭建 个人博客"></a>在github上搭建 个人博客</h1><ul>
<li>我的天啊  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我有一句吗卖批  不知当讲不当讲</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>There is a mmp in my hard , Do you have B number in your hard</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/bin/python</span><br><span class="line">print &quot;Hello, Your Mother is my Wife.&quot;;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xin]]></title>
      <url>/2018/01/07/xin/</url>
      <content type="html"><![CDATA[<p>这是一个测试页面</p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> text </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[文章名]]></title>
      <url>/2017/05/19/blog0/</url>
      <content type="html"><![CDATA[<ul>
<li>进程调度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">os:</span><br><span class="line">硬件抽象，虚拟计算机</span><br><span class="line">system call---操作系统输出</span><br><span class="line">cpu：</span><br><span class="line">虚拟化，基于时序进行分段运行的，消耗时间片（time slice），</span><br><span class="line">某些进程优先级---打标签</span><br><span class="line">调度器：</span><br><span class="line">也是程序---内核中的进程调度子系统。</span><br><span class="line">调度器中的一种 CFS调度器</span><br><span class="line">调度器：Big O 算法</span><br><span class="line">O（1）从进程中选择一个进程所需要的时长时恒定的；调度进程，优先级。</span><br><span class="line">优先级分为两类：</span><br><span class="line">实时优先级--- 0-99</span><br><span class="line">静态优先级--- 100-139，用户可以手动指定nice值来调整优先级；</span><br><span class="line">Memory:内存</span><br><span class="line">虚拟地址空间</span><br><span class="line">PAE：</span><br><span class="line">32bits,4bits在32位的基础上加入4位变成现今的64G；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cpu调度</span><br><span class="line">0-139</span><br><span class="line">实时优先级；1-99---数值越大优先级越高</span><br><span class="line">动态优先级；100-139--数字越小优先级越高</span><br><span class="line"></span><br><span class="line">linux里调度器有多个不同的调度器；对于同一个进程由优先级较高的调度器进行调度；</span><br><span class="line">用户空间；调度器为CFS完全公平调度</span><br><span class="line">实时进程；调度器为SCHED_FIFO【0-99】</span><br><span class="line"></span><br><span class="line">类别；</span><br><span class="line">实时优先级调度；</span><br><span class="line">SCHED_FIFO ---调度器为先进先出 【0-99】---调度内核级别</span><br><span class="line">SCHED_RR ---轮询调度---同一种级别的进程有轮询的方式进行调度；</span><br><span class="line">用户空间调度；</span><br><span class="line">SCHED_NORMAL,SCHED_OTHER 【100-139】---完全公平调度</span><br><span class="line"></span><br><span class="line">cpu调度进行更改；</span><br><span class="line">动态优先级调度，用户空间调度；</span><br><span class="line">SCHED_FIFO,</span><br><span class="line">nice,renice</span><br><span class="line">实时优先级调度更改；</span><br><span class="line">SCHED_FIFO</span><br><span class="line"># chrt -f [1-99] /path/to/program arguments</span><br><span class="line">SCHED_RR;real-time</span><br><span class="line"># chrt -r [1-99] /path/to/program arguments</span><br></pre></td></tr></table></figure>
<ul>
<li>cpu绑定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">strace 跟踪进程</span><br><span class="line"></span><br><span class="line">绑定cpu;</span><br><span class="line"># cat /proc/cpuinfo ---查看cpu个数类型</span><br><span class="line"># ps axo psr，comm ---显示哪个程序运在哪个CPU上，</span><br><span class="line"># ps axo psr,comm,pid---显示运行的进程及pid</span><br><span class="line">绑定qpidi进程的cpu</span><br><span class="line"># taskset -p -c 3  11215</span><br><span class="line"># ps axo psr，comm</span><br><span class="line">也可以绑定两个cpu</span><br><span class="line"># taskset -p -c 3,4  11215</span><br><span class="line"># ps axo psr，comm</span><br><span class="line"></span><br><span class="line">中断和IRQ调节，将cpu隔离出来专门记录中断信息；</span><br><span class="line">查看中断文件每个CPU的中断数；</span><br><span class="line"># cat /proc/interrupts--- cpu的io中断号</span><br><span class="line"># ls /proc/irp/---中断文件       </span><br><span class="line"># ls /proc/interrupts/0/---查看中断文件的中的绑定cpu的文件；</span><br><span class="line"># cat /proc/irp/0/smp_affinity</span><br><span class="line">ffffffff,ffffffff----一般情况下默认绑定格式；</span><br><span class="line"></span><br><span class="line">定义中断由第一个cpu处理绑定；</span><br><span class="line"># echo 1 &gt;/proc/irp/32/smp_affinity---定义32号中断由第一个CPU来处理</span><br><span class="line"># cat  /proc/irp/32/smp_affinity</span><br><span class="line">1</span><br><span class="line">要想将所有的中断号绑定在1号CPU需要脚本来实现；</span><br></pre></td></tr></table></figure>
<p>numa—服务实现自动绑定CPU;略<br>numa,numactl,numad<br>nice renlce 查文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">隔离CPU编辑配置文件；</span><br><span class="line">/etc/grub.conf</span><br><span class="line">内容尾部kernel后添加Isolcpus=cpu namber,cpu nameber (注意写上cpu的号码，0，1，2，3)</span><br><span class="line">定义中断smp_affinity；</span><br><span class="line"># echo cpunamber,...&gt;/proc/irp/#编号/smp_affinity/</span><br><span class="line">中断中使用的CPU是处Isolcpus外的CPU；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">建议使用的监控工具CPU utilinzation;</span><br><span class="line">htop,dstat,glances,sar，sysdig(需要自己编译安装)</span><br><span class="line"># sar -p ALL 1 显示一秒钟所有使用率cpu</span><br><span class="line"># iostat -c 1 ---显示cpu的使用率；查看io状态命令，也可以查看cpu</span><br><span class="line"># uptime ---可以查看cpu使用率，平均负载情况；</span><br><span class="line"># vmstat 1 ----查看 procs运行队列和阻塞队列长度</span><br><span class="line">使用strace命令追踪进程查看所阻塞的进程；</span><br><span class="line">上述命令都是从/proc,/sys目录下剪切出来的，可以查看源文件；</span><br></pre></td></tr></table></figure>
<ul>
<li>linux 内存使用架构；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linux所有共享库都在/lib64目录下；</span><br><span class="line">进程调用此目录下的代码；</span><br><span class="line">DMA:</span><br><span class="line">cpu跟外部设备IO设备进行交互的方式；</span><br><span class="line">poll:轮询，忙等待；</span><br><span class="line">中断:</span><br><span class="line">由DMA：自带芯片发送起请求到cpu</span><br><span class="line"></span><br><span class="line">与cup相关的工具；代码级时编译安装编写脚本；评估系统性能；</span><br><span class="line">systemtap,oprofile,valgrind</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">内存；</span><br><span class="line">1、大页面和透明大页面；</span><br><span class="line">内存时由块管理，即众所周知的页面，一个页面由4096字节。1MB内存等于256个页面。1GB内存等于256000个页面等等。CPU有内嵌的内存管理单元，这些的单元包含这些页面列表，每个页面都是用页面条目参考；</span><br><span class="line">让系统管理大量内存有两种方法；</span><br><span class="line">-增加内存管理单元中页表数；</span><br><span class="line">-增加页面大小；</span><br><span class="line"> 第一种方法很昂贵，因为现代处理器中的硬件内存管理单元只支持数百或者书签页表条目。另外适用于管理书签页面（MB内存）硬件和内存算法可能无法很好的管理数百万（甚至数十亿）页面。这会造成性能问题；但程序需要使用比内存管理单元支持的更多的页面，该系统同会退回到缓慢的给予软件的内存管理，从而造成整个系统缓慢运行。</span><br><span class="line"></span><br><span class="line"> 红帽企业版LINUX6采用第二种方法，即使用超大页面。</span><br><span class="line"> 简单说，超大页面是2MB和1GB大小的内存模块。2MB使用的页表可管理多GB内存，而1GB页是TB内存的最佳选择。</span><br><span class="line"></span><br><span class="line"> 超大页面必须引导时分配。他们也很难受懂管理，且经常需要更改代码以便可以有效使用。因此红帽企业版LInux也部署了透明超大页（THP）。THP是一个提取城，可自动创建，管理和使用超大页面的大多数方案；</span><br><span class="line"></span><br><span class="line"> 使用Valgtind简要描述内存使用；C编译成精通编写可以研究；</span><br><span class="line"></span><br><span class="line"> 其他工具；systemtap,oprofile，vagraind都需要写脚本，红帽官方有systemtap使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、编译内核参数；</span><br><span class="line">    内存调优，proc文件系统的、proc/sys/vm目录中</span><br><span class="line">    （1）内存调优；memory过量使用，有三种类型；</span><br><span class="line">    overcommit_memory:有三种参数，分别为0,1,2 ；</span><br><span class="line">    0---默认设置。内核执行启发式内存过量使用处理，方法是估算可用内存量，并拒绝明显的无效的请求。遗憾的是因为存是使用启发式而非准确算法进行部署，这个设置有时可能会赵成系统中的可用内存超载。</span><br><span class="line">    1---内核执行无内存过量使用处理，使用之歌设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能。</span><br><span class="line">    2---内存拒绝等于或者大于总可用swap大小及overcommit_ratio指定的物理RAM比例的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    2---模式中的overcommit_ratio为比例参数；</span><br><span class="line">    内存模式为，swap+RAM*overcommit_ratio磁盘使用大小；</span><br><span class="line">    已条有目的的话使用1模式，2模式将不在考虑范围；</span><br><span class="line"></span><br><span class="line">    配置文件；vim /etc/sysctl.conf当中尾部添加</span><br><span class="line">    vm.overcommit_memory = 1</span><br><span class="line">    保存以后使用sysctl -p命令执行；</span><br><span class="line">     (2)nr_hugepages大内存页；</span><br><span class="line">     规定在内存中配置的超大页数。默认为0。只有系统中有足够的连续可用页时方可分配（或者取消分配）超大页。为这个参数保留的页无法用于其他目的。安装文件</span><br><span class="line">     /usr/share/doc/kernel-doc-kernel_version/Documentation/vm/hugetlbpage.txt</span><br><span class="line"></span><br><span class="line">    查看大内存页使用情况；cat /proc/meminfo</span><br><span class="line">     AnonHugepages   110592 ---有内核自动使用维护的；透明匿名的大内存页；</span><br><span class="line">     Hugepages_Total 0   大内存页使用情况为没有使用</span><br><span class="line">     Hugepages_Free  0   </span><br><span class="line">     Hugepages_Rsvd  0</span><br><span class="line">     Hugepages_Surp  0</span><br><span class="line">     Hugepagesize    2048 大内存页的大小为两兆MB</span><br><span class="line"></span><br><span class="line">     配置大内存页；vim /etc/sysctl.conf当中尾部添加</span><br><span class="line">     vm.nr_hugepages = 10 ---添加10个内存页；</span><br><span class="line">     # sysctl -p ---运行一下</span><br><span class="line">     # cat /proc/meminfo ---查看内存页使用情况</span><br><span class="line"></span><br><span class="line">     也可以使用大内存页使用基于内存的文件系统；</span><br><span class="line">     将大内存页进行挂在文件系统实现；</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 于容量相关的内核可调参数；</span><br></pre></td></tr></table></figure>
<p>位于参数proc文件系统中/proc/sys/kernel/目录中；<br>msgmax —消息队列；单个消息的大小。<br> -一字节为单规定消息队列中任意信息的最大允许大小。这个值一定不能超过该队列的大小（msgmnb）.默认值为65536字节；<br>msgmnb<br> -以字节为单位规定单一信息队列的最大值。默认为65536字节；<br>msgmni<br> -规定信息队列识别符的最大数量（以及队列的最大数量）。64位架构机器的默认值为1985；32位架机器的默认值为1736.</p>
<p>shmall —共享内存<br>  -字节位单位规定一次在该系统中可使用的共享内存总量。64位架构机器的默认值为4294967296；32位架构机器的默认值为268435456.<br>shmmax<br>  -以字节为单位规定内核可允许的最大共享内存片。64位架构机器的默认值为68719476736；32位架构机器的默认值为4294967295.注：单内核支持的值比这个值要多得多。<br>shmmni<br>  -规定系统范围内最大共享内存片段。在63位和32位架构机器中的默认值都是4096。<br>threads-max<br>  -规定一次内核使用的最大线程（任务）数。默认值与max_threads相同。使用的方程式是；<br>  max_threads=mempages / (8 * THREAD_SIZE / PAGE_SIZE)<br>  threads-max的最小值为20.</p>
<p>  shmmni * shmall =shmmax 多少片乘上片的大小等于总数大小；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-与容量相关的文件系统可调参数；</span><br></pre></td></tr></table></figure></p>
<p>已下可调参数位于proc文件系统的/proc/sys/fs/目录中。<br>aio-max-nr<br> -规定在所有活动异步I/O上下文中可允许的最多事件数。默认值为65536。注：更改这个值不会预先分配或者重新定义内核数据结构的大小。</p>
<p> 使用nginx异步io时根据需求可以调大，消耗内存较大；</p>
<p> file-max<br>  -列出内核分配的文件数量的最大值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Out-of-Memory kill 可调用参数；</span><br></pre></td></tr></table></figure>
<p>  -内存不足（OOM）指的时所有可用内存，包括swap空间都已经被分配的计算状态。默认情况下，这个状态可赵成系统panic,并停止如预期般工作。当/proc/sys/vm/panic_on_oom参数设定为0会让内核在出现OOM时调用oom_killer功能。通常oom_killer可杀死偷盗进程，并让系统正常运行；</p>
<p>  可在每一个进程中设定一下参数，提高您对被oom_killer功能杀死的进程进行的控制。它位于proc文件系统中/proc/pid/目录下，其中pid是进程id.</p>
<p>  oom_adj<br>   -定义-16到15之间的一个数值以便帮助决定某进程的oom_score。oom_score值越高，被oom_killer杀死的进程数就越多。将oom_adj值设定为-17则为该进程禁用oom_killer。</p>
<pre><code>？写脚本获取id号进行赋值，或者手动执行；

 当内存耗尽时系统将消耗最大的进程kill掉。
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 调整虚拟内存</span><br><span class="line">虚拟内存</span><br></pre></td></tr></table></figure>
<p>```</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tag1 </tag>
            
            <tag> tag2 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
